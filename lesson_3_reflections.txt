When would you want to create a remote repository rather than keeping all your work local?

1. If you happen to be on a different computer and unable to work on the project on home computer.
2. When openly collaborating on all changes in a product. 
3. When making changes and testing them out on Github :)

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If people are changing the repository, they could change the code out from underneath you.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A branch is just a different path for the code in a repository
A clone is a copy of code files and their git repositories to a local computer
A fork is a copy from one Github account to another.

What is the benefit of having a copy of the last known state of the remote stored locally?

If you have to go offline (i.e. airplane flight or something) then you have the most uptodate copy to work on while you are offline. 
Potentially less merge conflicts when you come back online.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Could manually send the files back and forth, but would have to specify every change which might be tedious. The command line stuff would be easier, but it would be much harder to figure what went wrong.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

It depends on what you're trying to do. If you are basically constructing a new feature that will require lots of new and novel code, then it's probably best to use a branch. If you are just fixing bugs and making small changes, probably best to use master.
 
